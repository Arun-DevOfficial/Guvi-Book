{
    "/": {
        "title": "Introduction",
        "text": "Introduction to TypeScript What is TypeScript? TypeScript is an  open-source, strongly typed, object-oriented  programming language developed by  Microsoft . It is a  superset of JavaScript , meaning any valid JavaScript code is also valid TypeScript. TypeScript provides  static typing ,  interfaces , and  advanced features  to make JavaScript development more scalable and maintainable. TypeScript ‚Üí Compiles to ‚Üí JavaScript Why Use TypeScript? JavaScript is a dynamically typed language, which means errors are often caught only at runtime. TypeScript helps solve this problem by introducing  static typing , allowing developers to detect errors  at compile time  rather than runtime. Key Features of TypeScript Static Typing  ‚Äì TypeScript introduces types, ensuring type safety. Interfaces & Generics  ‚Äì Supports object-oriented programming principles. Modern JavaScript Features  ‚Äì Supports the latest JavaScript features and compiles them to older versions if needed. Better Code Quality  ‚Äì Improves readability, debugging, and maintainability. Scalability  ‚Äì Ideal for large-scale applications with better structure and maintainability. Basic Example: JavaScript vs TypeScript JavaScript Code (No Type Safety) function add(a, b) {   return a + b; } console.log(add(5, \"10\")); // Output: 510 (unexpected behavior) TypeScript Code (With Type Safety) function add(a: number, b: number): number {   return a + b; } console.log(add(5, 10)); // Output: 15 // console.log(add(5, \"10\")); // ‚ùå Compile-time error Here, TypeScript prevents passing incorrect data types, reducing runtime errors. How TypeScript Works? Write TypeScript code ( .ts  file). TypeScript compiles ( transpiles ) it into JavaScript using the TypeScript Compiler ( tsc ). The generated JavaScript code runs in the browser or Node.js. Example Workflow: tsc index.ts  # Compiles TypeScript to JavaScript node index.js # Runs the compiled JavaScript file Installation & Setup Install TypeScript  globally using npm: npm install -g typescript Check if TypeScript is installed: tsc --version Create a TypeScript file ( index.ts ) Compile it to JavaScript: tsc index.ts Conclusion TypeScript is a powerful tool that improves JavaScript development by adding  static typing, better tooling, and scalability . It is widely used in frameworks like  Angular, React, and Node.js  to build modern web applications. Would you like to see more in-depth topics like TypeScript interfaces, classes, or real-world use cases? üöÄ"
    },
    "/documentation/typescript-basics/why-typescript/": {
        "title": "Why Typescript?",
        "text": "Since you already have the  Introduction to TypeScript , let's move on to the next key topic: Why TypeScript? Key Differences from JavaScript TypeScript is a  superset  of JavaScript that adds  static typing, interfaces, and modern JavaScript features  to improve code quality and maintainability. But why should you use TypeScript instead of JavaScript? 1. TypeScript vs. JavaScript: Key Differences Title Title Value Value Value Value Value Value Value Value üü° JavaScript (No Type Checking) function add(a, b) {   return a + b; } console.log(add(5, \"10\")); // Output: \"510\" (unexpected behavior) üîµ TypeScript (With Type Checking) function add(a: number, b: number): number {   return a + b; } // console.log(add(5, \"10\")); // ‚ùå Error: Argument of type 'string' is not assignable to parameter of type 'number'. console.log(add(5, 10)); // ‚úÖ Output: 15 In TypeScript, errors are detected at  compile time , preventing unexpected behavior. 2. Advantages of Using TypeScript ‚úÖ  Static Typing  ‚Äì Reduces runtime errors by detecting issues during development. ‚úÖ  Better Code Readability  ‚Äì Code is more structured and self-documenting. ‚úÖ  Improved IDE Support  ‚Äì Features like IntelliSense, autocompletion, and inline documentation. ‚úÖ  Scalability  ‚Äì Ideal for large-scale applications with complex logic. ‚úÖ  Better Refactoring  ‚Äì Safer code changes without breaking functionality. ‚úÖ  ES6+ Features  ‚Äì Supports modern JavaScript features while ensuring backward compatibility. 3. How TypeScript Works (Compilation Process) 1Ô∏è‚É£ You write TypeScript code ( .ts  files). 2Ô∏è‚É£ TypeScript compiler ( tsc ) converts it into JavaScript ( .js ). 3Ô∏è‚É£ The generated JavaScript runs in browsers or Node.js. Example : TypeScript Code ( script.ts ) let message: string = \"Hello, TypeScript!\"; console.log(message); Compiled JavaScript ( script.js ) var message = \"Hello, TypeScript!\"; console.log(message); üëâ TypeScript  removes types  during compilation, ensuring compatibility with standard JavaScript environments. 4. TypeScript in Real-World Projects Used in  Angular, React, Vue.js , and  Node.js  projects. Adopted by  Microsoft, Google, Airbnb, and Slack  for large-scale applications. Helps  reduce bugs, improve collaboration , and  enhance maintainability  in teams. Conclusion TypeScript  enhances JavaScript  by adding strong typing, better tooling, and improved maintainability. It is a  must-learn  for modern web development, especially for large projects. Next Topic:  üîπ  Setting Up TypeScript in Your Project  üöÄ Would you like a  step-by-step guide on installing TypeScript  and configuring it for your project? üòä"
    },
    "/documentation/typescript-basics/setting-up-typescript/": {
        "title": "Setting Up TypeScript",
        "text": "Setting Up TypeScript: A Step-by-Step Guide  üöÄ Now that you understand what TypeScript is and why it‚Äôs useful, let's set it up in your development environment. 1Ô∏è‚É£ Installing TypeScript üìå Using npm (Recommended) TypeScript can be installed globally using  Node.js  and  npm (Node Package Manager) . If you haven‚Äôt installed Node.js, download it from  nodejs.org . Now, install TypeScript globally using npm: npm install -g typescript To verify the installation, run: tsc --version This should output a version number (e.g.,  Version 5.x.x ), confirming TypeScript is installed. 2Ô∏è‚É£ Creating a TypeScript Project üìå Step 1: Initialize a Project Create a new project folder and navigate into it: mkdir my-typescript-project cd my-typescript-project Now, initialize a  package.json  file (for npm-based projects): npm init -y This file will store your project dependencies and configurations. üìå Step 2: Install TypeScript Locally Instead of a global installation, you can install TypeScript only in this project: npm install --save-dev typescript Now, you can use  npx tsc  instead of  tsc  to run the TypeScript compiler locally. 3Ô∏è‚É£ Configuring TypeScript with  tsconfig.json TypeScript projects require a  tsconfig.json  file to manage configurations. To generate one, run: npx tsc --init This creates a  tsconfig.json  file with default settings. Let‚Äôs modify it: Recommended  tsconfig.json  Settings {   \"compilerOptions\": {     \"target\": \"ES6\",       \"module\": \"CommonJS\",       \"outDir\": \"./dist\",       \"rootDir\": \"./src\",       \"strict\": true,       \"esModuleInterop\": true     },   \"include\": [\"src\"],   \"exclude\": [\"node_modules\"] } target  ‚Äì Specifies which JavaScript version to compile to (ES6 or later recommended). module  ‚Äì Specifies the module system (CommonJS for Node.js, ESNext for modern projects). outDir  ‚Äì Where compiled JavaScript files will be placed. rootDir  ‚Äì The directory where TypeScript source files ( .ts ) are stored. strict  ‚Äì Enables strict type checking (recommended for best practices). esModuleInterop  ‚Äì Allows compatibility with CommonJS and ES Modules. 4Ô∏è‚É£ Writing Your First TypeScript Code üìå Step 1: Create a  src  Directory mkdir src Inside  src , create a  TypeScript file  ( index.ts ): // index.ts const message: string = \"Hello, TypeScript!\"; console.log(message); 5Ô∏è‚É£ Compiling TypeScript to JavaScript To compile the TypeScript file, run: npx tsc This will generate a  dist/index.js  file that looks like this: \"use strict\"; var message = \"Hello, TypeScript!\"; console.log(message); Now, run the JavaScript file using Node.js: node dist/index.js Output: Hello, TypeScript! 6Ô∏è‚É£ Running TypeScript Code Directly with  ts-node Instead of compiling manually, you can use  ts-node  to run TypeScript files directly. Install  ts-node : npm install --save-dev ts-node Run the TypeScript file without compiling: npx ts-node src/index.ts Output: Hello, TypeScript! This saves time during development. üöÄ 7Ô∏è‚É£ Setting Up TypeScript in a Frontend Project If you're using TypeScript with  React , install it with: npx create-react-app my-app --template typescript For  Vue.js , install TypeScript support: vue create my-app # Select TypeScript during setup For  Next.js , use: npx create-next-app@latest my-app --typescript For  Node.js , follow the  tsconfig.json  setup above and use TypeScript with Express or other frameworks. üéØ Summary ‚úÖ Installed TypeScript globally and locally. ‚úÖ Initialized a project and set up  tsconfig.json . ‚úÖ Wrote and compiled the first TypeScript program. ‚úÖ Used  ts-node  to run TypeScript without manual compilation. ‚úÖ Set up TypeScript for frontend and backend projects. üîú Next Topic: Type Annotations & Basic Types in TypeScript Would you like me to continue with  Type Annotations (string, number, boolean, arrays, etc.) ? üòä"
    },
    "/documentation/tailwindcss/adaptive-design/": {
        "title": "Adaptive Design",
        "text": "Master Tailwind CSS: Build Stunning & Responsive UIs with Ease! Introduction to Tailwind CSS What is Tailwind CSS? Tailwind CSS is a  utility-first  CSS framework that allows developers to design UI components directly in their HTML/JSX using predefined utility classes. Unlike traditional CSS frameworks (like Bootstrap), Tailwind does not provide pre-styled components but instead gives low-level utility classes to build custom designs efficiently. \"Tailwind CSS is like writing inline styles but with superpowers!\" Why Use Tailwind CSS? ‚úÖ  Faster Development  ‚Äì No need to write custom CSS; just use utility classes. ‚úÖ  Highly Customizable  ‚Äì Easily configure colors, fonts, spacing, etc., via  tailwind.config.js . ‚úÖ  Responsive Design  ‚Äì Built-in responsive utilities like  sm: ,  md: ,  lg:  for mobile-first design. ‚úÖ  Lightweight  ‚Äì Purges unused CSS, making final CSS files smaller. ‚úÖ  Consistent Design  ‚Äì Reduces inconsistencies across the UI. How to Install Tailwind CSS? You can use Tailwind CSS in different ways, but the most common method is via npm. 1Ô∏è‚É£ Install Tailwind in a React Project (Recommended) npm install -D tailwindcss postcss autoprefixer npx tailwindcss init -p This will generate a  tailwind.config.js  file. 2Ô∏è‚É£ Configure Tailwind to Process CSS Open  tailwind.config.js  and update the content: module.exports = {   content: [\"./src/**/*.{js,jsx,ts,tsx}\"], // Adjust paths as needed   theme: {     extend: {},   },   plugins: [], }; 3Ô∏è‚É£ Add Tailwind to Your CSS In  index.css  (or  globals.css ), import Tailwind directives: @tailwind base; @tailwind components; @tailwind utilities; 4Ô∏è‚É£ Start Using Tailwind Classes in JSX export default function App() {   return (     <div className=\"flex items-center justify-center h-screen bg-gray-100\">       <h1 className=\"text-4xl font-bold text-blue-600\">Hello, Tailwind CSS! üöÄ</h1>     </div>   ); } Tailwind CSS Utility Classes Example Feature Example Classes Spacing p-4 ,  m-2 ,  px-6 ,  py-8 Typography text-xl ,  font-bold ,  text-center Colors bg-blue-500 ,  text-red-600 ,  border-gray-300 Flexbox/Grid flex ,  grid ,  items-center ,  justify-between Borders border ,  border-2 ,  rounded-lg Shadows shadow-md ,  shadow-lg ,  shadow-xl Hover/Focus hover:bg-green-500 ,  focus:outline-none Tailwind Responsive Design Tailwind makes responsiveness easy with  mobile-first classes : <div className=\"p-4 sm:p-6 md:p-8 lg:p-10 xl:p-12\">   {/* Different paddings for different screen sizes */} </div> Screen Size Prefix Small (640px) sm: Medium (768px) md: Large (1024px) lg: Extra Large (1280px) xl: Dark Mode Support Enable dark mode in  tailwind.config.js : module.exports = {   darkMode: 'class', // Enables dark mode using 'class' strategy   content: [\"./src/**/*.{js,jsx,ts,tsx}\"],   theme: { extend: {} },   plugins: [], }; Now you can toggle dark mode using: <div className=\"dark:bg-gray-800 dark:text-white\">   Dark mode content </div> Conclusion Tailwind CSS is a powerful and flexible CSS framework that enhances development speed and maintains a clean, scalable codebase. If you love  utility-first design  and want  full control over your UI , Tailwind is a great choice! Would you like a  Tailwind + React  starter template or some animations using  GSAP with Tailwind?  üöÄ"
    },
    "/documentation/react-js/new-feature/": {
        "title": "New Feature",
        "text": "React 19 Unleashed: Discover the Game-Changing Features & Enhancements! ‚öõÔ∏èüöÄ ÓàÉReact 19, released on December 5, 2024, introduces a suite of groundbreaking features and improvements designed to enhance developer experience and application performanceÓàÑ ÓàÄciteÓàÇturn0search0ÓàÅ Here's an overview of what's newÓàÜ 1. Actions: Simplifying State Management ÓàÉThe new  Actions  API streamlines state updates by allowing asynchronous functions to handle state changes directlyÓàÑÓàÉThis eliminates the need for manual handling of pending states, errors, and optimistic updates, resulting in cleaner and more maintainable codeÓàÑ ÓàÄciteÓàÇturn0search0ÓàÜ Example:  ÓàÉ 'use server'; async function saveData(data) {   // Perform async operations } ÓàÉIn this example, the `saveData` function is defined as a server action using the `'use server'` directive, enabling seamless integration with React's concurrent featuresÓàÜ ## 2. Server Components: Enhancing Performance ÓàÉ**Server Components** allow developers to offload rendering to the server, reducing the amount of JavaScript sent to the client and improving initial load timesÓàÑÓàÉThis feature enables a more efficient data-fetching strategy and enhances overall application performanceÓàÑ ÓàÄciteÓàÇturn0search5ÓàÜ *Example:* ÓàÉ ```jsx // ServerComponent.server.jsx export default function ServerComponent() {   const data = fetchDataFromServer();   return <div>{data}</div>; } ```ÓàÜ ÓàÉHere, `ServerComponent` fetches data on the server side, sending a fully rendered HTML snippet to the client, which enhances performanceÓàÜ ## 3. New Hooks: useActionState, useFormStatus, and useOptimistic ÓàÉReact 19 introduces several new hooks to simplify state managementÓàÜ - **`useActionState`**:ÓàÉManages the state of actions, providing insights into pending, fulfilled, or rejected statesÓàÜ - **`useFormStatus`**:ÓàÉTracks the status of form submissions, enabling better user feedback during form interactionsÓàÜ - **`useOptimistic`**:ÓàÉFacilitates optimistic UI updates by allowing developers to assume a successful operation and update the UI accordingly, enhancing user experienceÓàÜ *Example:* ÓàÉ ```jsx function FormComponent() {   const formStatus = useFormStatus();   return (     <form>       {formStatus.pending && <p>Submitting...</p>}       {/* Form fields */}     </form>   ); } ```ÓàÜ ÓàÉIn this snippet, `useFormStatus` provides real-time feedback on the form's submission status, improving UXÓàÜ ## 4. The `use` API: Streamlining Async Operations ÓàÉThe new **`use`** API simplifies asynchronous operations within components by allowing developers to directly await promises during renderingÓàÑÓàÉThis leads to more concise and readable codeÓàÑ ÓàÄciteÓàÇturn0search0ÓàÜ *Example:* ÓàÉ ```jsx function DataComponent() {   const data = use(fetchData());   return <div>{data}</div>; } ```ÓàÜ ÓàÉHere, the `use` hook waits for the `fetchData` promise to resolve before rendering the component, simplifying data fetching logicÓàÜ ## 5. Improved Hydration and Context API ÓàÉReact 19 brings enhancements to hydration processes and the Context APIÓàÜ - **Improved Hydration Diffs**:ÓàÉReduces discrepancies between server-rendered and client-rendered content, ensuring a smoother user experienceÓàÜ - **Enhanced Context API**:ÓàÉOffers better performance and flexibility in managing global state across componentsÓàÜ *Example:* ÓàÉ ```jsx const ThemeContext = React.createContext('light'); function App() {   return (     <ThemeContext.Provider value=\"dark\">       <Toolbar />     </ThemeContext.Provider>   ); } ```ÓàÜ ÓàÉIn this example, the Context API provides a theme value to all components within the `ThemeContext.Provider`, facilitating consistent theming across the applicationÓàÜ ## 6. Support for Document Metadata and Stylesheets ÓàÉReact 19 introduces support for managing document metadata and stylesheetsÓàÜ - **Document Metadata**:ÓàÉAllows dynamic updates to metadata like titles and meta descriptions, improving SEO and accessibilityÓàÜ - **Stylesheets**:ÓàÉEnables direct inclusion and management of CSS stylesheets within React components, promoting better styling practicesÓàÜ *Example:* ÓàÉ ```jsx import './styles.css'; function StyledComponent() {   return <div className=\"styled\">Hello, World!</div>; } ```ÓàÜ ÓàÉHere, `styles.css` is imported directly into the component, ensuring scoped and maintainable stylesÓàÜ ## 7. Enhanced Error Reporting and Custom Elements Support ÓàÉThis release also focuses on developer experienceÓàÜ - **Improved Error Reporting**:ÓàÉProvides more descriptive error messages and stack traces, simplifying debuggingÓàÜ - **Custom Elements Support**:ÓàÉEnhances integration with Web Components by allowing React to work seamlessly with custom HTML elementsÓàÜ *Example:* ÓàÉ ```jsx function CustomElementWrapper() {   return <custom-element prop=\"value\"></custom-element>; } ÓàÉIn this snippet, React renders a custom HTML element, demonstrating improved compatibility with Web ComponentsÓàÜ ## Conclusion ÓàÉReact 19 represents a significant evolution in the React ecosystem, introducing features that simplify development and enhance performanceÓàÑÓàÉFrom the innovative Actions API to Server Components and new hooks, this release empowers developers to build more efficient and user-friendly applicationsÓàÑÓàÉUpgrading to React 19 offers a pathway to leverage these advancements and stay at the forefront of modern web developmentÓàÜ For a comprehensive guide on upgrading and detailed examples, refer to the official [React 19 Upgrade Guide](https://react.dev/blog/2024/12/05/react-19)."
    }
}